<?php
//require_once DRUPAL_ROOT . '/vendor/google-api-php-client/vendor/autoload.php';
require_once DRUPAL_ROOT . '/sites/all/modules/custom/calendar_events/vendor/autoload.php';

function get_data_from_gcal() {
  //putenv('GOOGLE_APPLICATION_CREDENTIALS=./sites/all/modules/custom/calendar_events/vendor/calendar-events-948c5f78be89.json');
  putenv('GOOGLE_APPLICATION_CREDENTIALS=' . DRUPAL_ROOT . '/sites/all/modules/custom/calendar_events/vendor/calendar-events-a06518c4d1b5.json');
  $client = new Google_Client();
  $scopes = array('https://www.googleapis.com/auth/calendar.events.readonly');
  $client->useApplicationDefaultCredentials();
  $client->setScopes($scopes);
  $service = new Google_Service_Calendar($client);
  $calendarId = 'acquia.com_up74cprjekio3bs72tsi7lqg14@group.calendar.google.com';
  $optParams = array(
    'maxResults' => 10,
    'orderBy' => 'startTime',
    'singleEvents' => true,
    'timeMin' => date("c", mktime(date("H")-12, date("i"), date("s"), date("m"), date("d"), date("Y"))),
    'timeMax' => date("c", mktime(date("H")+12, date("i"), date("s"), date("m"), date("d"), date("Y"))),
  );
  $results = $service->events->listEvents($calendarId, $optParams);
  $events = $results->getItems();
  // Set cache lifetime.
  $cache_lifetime = 3600;
  // Establish the current time as a unix timestamp.
  $current_time = time();
  if (empty($events)) {
    print "No, there aren't any current events right now in the
        Events calendar.\n";
    return;
  }
  else {
    print "Yes, there are current events in the Events Calendar.\n";
    $location_array = array();
    $creator_emails = array();
    print "Calendar Events Found:\n";
    foreach ($events as $event) {
      array_push($location_array, $event->getLocation());
      print "Event Name:" . $event->getSummary() . "\n";
      // Get event creator information.
      $creator = $event->getCreator();
      array_push($creator_emails, $creator->email);
    }
    $validated_array = array();
    $user_error_position = array();
    foreach ($location_array as $key => $location_id) {
      // Zendesk ticket # Validation:
      // Validating 6 digit number (current zendesk ticket number length).
      // Validating 3 & 4 digits (sandbox ticket number length)
      if (preg_match('/^\d{3,7}$/', $location_id)) {
        array_push($validated_array, $location_id);
      }
      else {
        // If number is not a zendesk ticket number, print incorrect submission.
        drush_print(dt("You have submitted a ticket in the incorrect format @location_id", ['@location_id' => $location_id]));
        array_push($user_error_position, $key);
      }
    }
    // Find email address of users with errors.
    foreach ($user_error_position as $array_position) {
      $email = $creator_emails[$array_position];
      print "User who inputted error is " . $email . "\n";
    }
    // Set cache with results.
    cache_set('cached_gcal_data', $validated_array, 'cache', $current_time + $cache_lifetime);
  }
}

// get_data_from_gcal();

function drush_calendar_events_cal_fetch()
{
    //GET Zendesk Tickets with Event Type
    get_data_from_gcal();
    drush_print("calendar events fetch function run");
 }


// -------FOR REVERSE ZD TO CAL INTEGRATION-------

function send_event_to_cal() {
  //putenv('GOOGLE_APPLICATION_CREDENTIALS=./sites/all/modules/custom/calendar_events/vendor/calendar-events-948c5f78be89.json');
  putenv('GOOGLE_APPLICATION_CREDENTIALS=' . DRUPAL_ROOT . '/sites/all/modules/custom/calendar_events/vendor/calendar-events-a06518c4d1b5.json');
  $client = new Google_Client();
  $scopes = array('https://www.googleapis.com/auth/calendar');
  $client->useApplicationDefaultCredentials();
  $client->setScopes($scopes);

  $service = new Google_Service_Calendar($client);

  // Get event notification zendesk tickets from cache
  $tickets_from_cache = cache_get('cached_event_tickets');
  $event_tickets = array_values($tickets_from_cache->data);
  $calendarId = 'acquia.com_up74cprjekio3bs72tsi7lqg14@group.calendar.google.com';

  foreach($event_tickets as $tickets=>$ticket_data) {
    $eventLocation = $ticket_data[0];
    $eventSummary = $ticket_data[1];
    $eventDescription = $ticket_data[2];
    $eventStart = $ticket_data[3];
    $eventEnd = $ticket_data[4];

    $eventParams = new Google_Service_Calendar_Event( array(
        'summary' => $eventSummary,
        'location' => $eventLocation,
        'description' => $eventDescription,
        'start' => array(
          // 'dateTime' => '2019-03-05T15:00:00-08:00',
          'dateTime' => $eventStart,
          'timeZone' => 'America/Los_Angeles',
        ),
        'end' => array(
          // 'dateTime' => '2019-03-05T17:00:00-08:00',
          'dateTime' => $eventEnd,
          'timeZone' => 'America/Los_Angeles',
        ),
      ));
    $event = $service->events->Insert($calendarId, $eventParams);
    printf('Event created: %s\n', $event->htmlLink);
  }
}

// send_event_to_cal();

function drush_calendar_events_cal_send()
{
    //GET Zendesk Tickets with Event Type
    send_event_to_cal();
    drush_print("calendar events send function run");
 }
